import React, {useState, useEffect, useRef } from 'react'
import lang from '../utilis/languageContants'
import { useSelector } from 'react-redux'
import openai from "../utilis/openai"
import {API_OPTIONS} from "../utilis/constants"
import {addGPTMovieresults} from "../utilis/gptSlice"
import { useDispatch } from 'react-redux'


const GptSearchbar = () => {
  const dispatch = useDispatch()
  const searchText = useRef()

  // const [searchfield, setSearchfield] = useState("");

  const langkey = useSelector(store =>store.config.lang)

  
  //search movie in TMDB API
  const searchMovieTMDB = async (moviename) =>{
    const data = await fetch("https://api.themoviedb.org/3/search/movie?query=" +moviename+ "&include_adult=false&language=en-US&page=1", API_OPTIONS);
    const json = await data.json()

    return json.results;
  }




  // const handleGptSearchClick = async () => {
  //   console.log(searchText.current.value)
  //   //make an API call to gptAPI and get movie results
  //   const gptQuery = "Act as a movie recomendation by suggesting movies : "+searchText.current.value + "only give me names of 5 movies comma seperated results like the example given ahead, Example Results: Animal, Pushpa, Andarivadu, Robot, Bahubali"
  //   const gptResults = await openai.chat.completions.create({
  //     messages: [{ role: 'user', content: gptQuery }],
  //     model: 'gpt-3.5-turbo',
  //   });// got this code from  npm openai site  https://www.npmjs.com/package/openai
  //   console.log(gptResults)
  //   if(!gptResults.choices){
  //     return null;//for error handling
  //   }
  //   console.log(gptResults.choices?.[0]?.message?.content)
  //   const gptMovies = gptResults.choices?.[0]?.message?.content.split(",");// it turns output into an array with spliting comma seperated
  //   //["Radhe", "Roohi", S"ardar Ka Grandson", "The Big Bull", "Mumbai Saga"] will create 5movie names based on our search query passed to opnaiApI like this for above line
  //   // for each movie i will search in TMDB API

  //   const promiseArray = gptMovies.map(movie => searchMovieTMDB(movie)) //pasing movienames in map into the above created function to search in TMDB api
  //   //[promise,promise,promise,promise,promise,] wil get results as promise not results bcz it will take sometime to fetch from api
  //   const tmdbResults = await Promise.all(promiseArray) //this Promise.all(takes 5promises) and waits until it resolves all promises

  //   console.log(tmdbResults)
  //   // dispatch(addGPTMovieresults(tmdbResults)) we can store only moveresults coming from the TMDB which are searched based on openai movie name search results
  //   dispatch(addGPTMovieresults({movieNames : gptMovies, tmdb_matched_movieResults: tmdbResults})) //this push the tmdb results into store through the action addGPTMovieresult
  //   //also stores movenames generated bythe openai these 2 extracted in action.payload as well as defined its individual state in gptSlice
  
  
  // }


const handleGptSearchClick = async () => {
  console.log(searchText.current.value);

  try {
    const gptQuery =
      "Act as a movie recommendation by suggesting movies: " +
      searchText.current.value +
      ". Only give me names of 5 movies, comma-separated results like the example given ahead. Example Results: Animal, Pushpa, Andarivadu, Robot, Bahubali";
    const gptResults = await openai.chat.completions.create({
      messages: [{ role: "user", content: gptQuery }],
      model: "gpt-3.5-turbo",
    });

    console.log(gptResults);

    if (!gptResults.choices) {
      return null; // for error handling
    }

    console.log(gptResults.choices?.[0]?.message?.content);

    const gptMovies = gptResults.choices?.[0]?.message?.content.split(",");

    const promiseArray = gptMovies.map((movie) => searchMovieTMDB(movie));

    const tmdbResults = await Promise.all(promiseArray);

    console.log(tmdbResults);

    dispatch(
      addGPTMovieresults({
        movieNames: gptMovies,
        tmdb_matched_movieResults: tmdbResults,
      })
    );
  } catch (error) {
    console.error("An error occurred during GPT movie suggestion:", error);

    // Check if the error message indicates that the API key expired
    if (error.message && error.message.includes("API key expired")) {
      alert(
        "Sorry, your OpenAI API key has expired. Please update your API key and try again."
      );
    } else {
      // For other types of errors, show a generic error message
      alert(
        "An error occurred during fetching movie suggestions from Open AI. Seems your api key expired."
      );
    }
  }
};











  // useEffect(()=>{
  // const storesearchfield = localStorage.getItem(searchfield)

  //   setSearchfield(storesearchfield)
  // },[searchfield])

  // const handleInputChange = (e) => {
  //   setSearchfield(e.current.value)
  // }
   //value={searchfield} onChange={handleInputChange}

  return (
    <div className='absolute flex justify-center xl:left-[35%] lg:left-[28%] md:left-[20%] sm:left-[15%] left-10% sm:top-30 md:top-20  top-32'>
      <form onSubmit={(e)=>{e.preventDefault()}} className= "md:flex md:justify-center md:items-center md:m-3 flex items-center">
        <div className='w-full h-8 flex justify-center items-center rounded-lg bg-gradient-to-r from-pink-500 via-red-600 to-black p-[3px] mx-4'>
          <div className='h-full w-full rounded-md flex justify-center items-center bg-white  '>
            <input type="text" ref={searchText}  className="w-full focus:outline-none rounded-md md:text-sm text-[12px] md:m-2 m-1 font-medium" placeholder={lang[langkey].gptSearchPlaceholder}/>
          </div>
        </div>
          
        <div className='md:w-20 md:h-8 sm:w-16 sm:h-6 flex justify-center items-center rounded-lg bg-gradient-to-r from-pink-500 via-red-600 to-black p-[3px]'>
          <div className='h-full w-full rounded-md flex justify-center items-center bg-white  '>
            <button onClick={handleGptSearchClick} className="text-black md:text-sm text-[12px] md:m-2 m-1 font-medium">{lang[langkey].search}</button>
          </div>
        </div>

      </form>
    </div>
  )
}

export default GptSearchbar;
